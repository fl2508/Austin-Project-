# -*- coding: utf-8 -*-
"""Exploring Austin Gentrification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QBnvpzFVwR5qn1mSLY68hXruppxYBYep

# Exploring Austin Gentrification
"""

!apt install libspatialindex-dev
!pip install CensusData geopandas earthpy

"""For working with Census data, we're doing to use the CensusData package. The CensusData package lets us access ACS data for a number of years, back until 2005 for 5-year estimates. Here is the [documentation](https://jtleider.github.io/censusdata/).

Here's an [example notebook](https://github.com/jtleider/censusdata/blob/master/docs/notebooks/example1.ipynb) which lets us see tract-level estimates for unemployment and high school dropout rates in Cook County, Illinois.
"""

import censusdata  
import pandas as pd
import numpy as np

"""You can get a link to all the Census geographies [here](https://jtleider.github.io/censusdata/geographies.html). Census geographies are defined on a hierarchical level. Since we're interested in both the Austin-Red Rock MSA, we can first get all the MSAs, as well as all the tracts in Texas."""

## Get all the MSAs in a dictionary object
msas = censusdata.geographies(censusdata.censusgeo([('metropolitan statistical area/micropolitan statistical area', '*')]), 'acs5', 2016)

## Get all the census tracts in Texas
tx_tracts = censusdata.geographies(censusdata.censusgeo([('state', '48'), ('tract', '*')]), 'acs5', 2016)

## Example of the available tract
list(tx_tracts.keys())[0:10]

## Getting the Austin-Round Rock MSA by the name
msas['Austin-Round Rock, TX Metro Area']

## Get all the counties tracts within the MSA
msas_counties = censusdata.geographies(censusdata.censusgeo([('state', '48'), ('metropolitan statistical area/micropolitan statistical area', '12420'), ('county', '*')]), 'acs5', 2016)

msas_counties

##list(msas_counties.keys())[0:10]

## Get unique identifier

county_id = censusdata.geographies(censusdata.censusgeo([('state', '48'), ('county', '*')]), 'acs5', 2016)
county_id ##dictionary with name as key and census geo object
##list(county_id.keys())[0:10]

#austin_counties = ['021', '055', '209', '453', '491']
austin_counties = ['453']

## Get all the census tracts from the counties 
## state> county> tract

austin_tracts_names = []
for county_id in austin_counties:
  county_tracts = censusdata.geographies(censusdata.censusgeo([('state', '48'), ('county', county_id), ('tract', '*')]), 'acs5', 2016)
  austin_tracts_names.extend(county_tracts.keys())

## Search for all variables by the label 'housing', first 10
censusdata.search('acs5', 2016, 'label', 'white', 'profile')

#find all census tracts within the MSA and generate % white of every census tract  

austin_msa = censusdata.download('acs5', 2016,
                             censusdata.censusgeo([('metropolitan statistical area/micropolitan statistical area', '12420')]),
                             ['DP05_0032PE'])

##i think the above one returns the right %white population, turns out there a lot of yt ppl 
##think about: how does construction of hispanic/latino as a race shape this? 
##acs: "The data on race are based on self-identification and the categories on the form generally reflect a social definition of race"

## AH: Yes! Here's a good paper on this -- https://www.annualreviews.org/doi/abs/10.1146/annurev.soc.29.010202.100006

##austin_msa = censusdata.download('acs5', 2016,
                             #censusdata.censusgeo([('state', '48')]),
                             #['B02001_002E', 'B01003_001E'])
# above returns %white for the entire state of tx 

#total population: B01003_001E
#estimate total white alone: B02001_002E
#educational attainment for the population 25 yr+: B15003_001E
austin_msa

type (white_travis)
#returns data frame is a spreadsheet (rows and cols)

white_travis

percent_white_travis
#returns series, a column

percent_white_travis.mean()

"""## Calculating percent white per tract"""

## import pandas
import pandas as pd

## create an empty DataFrame to store results in
df_white = pd.DataFrame()

## calculate the average %white for each tract
for county_id in austin_counties:
  county_white = censusdata.download('acs5', 2016,
                    censusdata.censusgeo([('state', '48'), ('county', county_id), ('tract', '*')]),
                    ['DP05_0032PE'], tabletype = 'profile')
  
  ## this adds the downloaded Census data to single data frame
  df_white = df_white.append(county_white)

## this lets see the whole dataframe
df_white = df_white[df_white['DP05_0032PE'] > 0]

## get a summary of each of these columns
df_white.describe()

## FL: If count = the number of census tracts, 
## why is percent_white not calculating one tract? 
## FL: Why does the min return an empty census tract and 29% white?

## get tract and county
df_white = df_white.reset_index()
df_white['TRACTCE'] = df_white['index'].apply(lambda x: x.request()['for'].split('tract:')[1])
df_white['COUNTYFP'] = df_white['index'].apply(lambda x: x.request()['in'][-3:])

"""## Lack of Education"""

## TODO(Francesca) -- 
## Do this same type of analysis with Lack of College Education
## i.e. Percentage of adults ages 25 and up in the tract who lack a four year 
##      college degree or higher level of education.

ed_census = censusdata.variable_info.search('acs5', 2016, 'label', 'education', 'profile')
df_census_ed = pd.DataFrame(ed_census)
df_census_ed

## import pandas
##import pandas as pd

## create an empty DataFrame to store results in
df_education = pd.DataFrame()

## calculate the average %white for each tract
for county_id in austin_counties:
  county_education_profile = censusdata.download('acs5', 2016,
                    censusdata.censusgeo([('state', '48'), ('county', county_id), ('tract', '*')]), 
                    ['DP02_0067PE'], tabletype = 'profile') 
  ## FL: Once I specified the 'profile', I was able to find %bachelors or higher
  ## FL: but when I try to access the estimate of people with %bach or higher,
  ## i get a really weird variable 
  
  ## this adds the downloaded Census data to single data frame
  df_education = df_education.append(county_education_profile)

df_education

## filter out < 0
df_education = df_education[df_education['DP02_0067PE'] > 0]

df_education.describe()

## get the tract
df_education = df_education.reset_index()
df_education['TRACTCE'] = df_education['index'].apply(lambda x: x.request()['for'].split('tract:')[1])

df_education['TRACTCE'].head()

## get the county by getting the last three characters in the index string
df_education['COUNTYFP'] = df_education['index'].apply(lambda x: x.request()['in'][-3:])

df_education['COUNTYFP']

df_education.head()

## From detail:
## "B15003_001E": "EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER",


## From profile: 
## "DP02_0067E": "Estimate!!EDUCATIONAL ATTAINMENT!!Percent bachelor's degree or higher"

## "DP02_0067PE": "Percent!!EDUCATIONAL ATTAINMENT!!Percent bachelor's degree or higher"

## "DP02_0135E": "Estimate!!ANCESTRY!!Total population!!Italian",

"""## Mapping"""

import os
import matplotlib.pyplot as plt

import geopandas as gpd

from google.colab import drive
drive.mount('/content/gdrive')

## load the shapefile
drive_url = '/content/gdrive/My Drive/tl_2016_48_tract/tl_2016_48_tract.shp'
tx_locations = gpd.read_file(drive_url)

## restrict to Austin counties
austin_locations = tx_locations[tx_locations.COUNTYFP.isin(austin_counties)]

austin_locations.head()

## now, merge the location dataset and the education dataset
df_mapdata = austin_locations.merge(df_education)
df_mapdata = df_mapdata.merge(df_white)

df_mapdata.head()

import matplotlib.pyplot as plt
import numpy as np

## percent education over Bachelor's degree
fig, ax = plt.subplots(figsize = (10,10))
df_mapdata.plot(column = 'DP02_0067PE', ax=ax, legend = True)
plt.show()

## percent white
fig, ax = plt.subplots(figsize = (10,10))
df_mapdata.plot(column = 'DP05_0032PE', ax=ax, legend = True)
plt.show()

